lab 1 create  
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace lab2
{
    class Complex
    {
        private double
            re, im, mod, arg;
        private Complex(double re, double im)
        {
            this.re = re;
            this.im = im;
        }

        public static Complex ExecutePrivateConstructor(double re, double im)
        {
            return new Complex(re, im);
        }

        public Complex()
        {
            this.re = 0;
            this.im = 0;
        }

        public static string operator +(Complex temp1, Complex temp2)
        {
            Complex temp = new Complex();
            temp.re = temp1.re + temp2.re;
            temp.im = temp1.im + +temp2.im;
            if (temp.im >= 0)
            {
                return Convert.ToString(temp.re) + "+ " + Convert.ToString(temp.im) + "i";
            }
            else 
            {
                return Convert.ToString(temp.re) + " " + Convert.ToString(temp.im) + "i";
            }
        }
        public static string operator -(Complex temp1, Complex temp2)
        {
            Complex temp = new Complex();
            temp.re = temp1.re - temp2.re;
            temp.im = temp1.im - temp2.im;
            if(temp.im <= 0)
                return Convert.ToString(temp.re) + "" + Convert.ToString(temp.im) + "i";
            else
                return Convert.ToString(temp.re) + "-" + Convert.ToString(temp.im) + "i";
        }
        public static string operator *(Complex temp1, Complex temp2)
        {
            Complex temp = new Complex();
            temp.re = temp1.re * temp2.re;
            temp.im = temp1.im * temp2.im;
            return Convert.ToString(temp.re) + "*" + Convert.ToString(temp.im) + "i";
        }

        public double Mod()
        { 
            mod = Math.Sqrt(re * re + im * im);
            return mod;
        }

        public double argument()
        {
            arg = Mod() * (re / (Math.Sqrt(re * re + im * im)) + (im / (Math.Sqrt(re * re + im * im))));
            return arg;
        }



    }
}

